#!/usr/bin/env node

import { Command } from 'commander';
import path from 'path';
import { AstTestGenerator } from './index';
import readline from 'readline';

const program = new Command();

program
  .name('test-gen')
  .description('CLI for generating integration tests')
  .version('1.0.0');

// program
//   .command('init')
//   .description('Initialize vector store for the project')
//   .argument('<projectPath>', 'Path to the project root')
//   .action(async (projectPath: string) => {
//     try {
//       const generator = new PageTestGenerator();
//       await generator.initializeVectorStore(path.resolve(projectPath));
//       console.log('‚úÖ Vector store initialized successfully');
//     } catch (error) {
//       console.error('‚ùå Error:', error instanceof Error ? error.message : 'Unknown error');
//       process.exit(1);
//     }
//   });

/*
–¢–µ—Å—Ç–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã (-u, --utils):
–ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
–°–º–æ–∂–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å –≤–∞—à–∏ —Ö–µ–ª–ø–µ—Ä—ã –∏ –º–æ–∫–∏
–°–æ—Ö—Ä–∞–Ω–∏—Ç –µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã (-t, --tests):
–ú–æ–¥–µ–ª—å –∏–∑—É—á–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã
–°–º–æ–∂–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –≤–∞—à–µ–º—É —Å—Ç–∏–ª—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

–ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞ (-e, --example):
–ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É
–°–æ—Ö—Ä–∞–Ω–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å—Ç–∏–ª—å
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
*/
program
  .command('generate')
  .description('Generate integration tests for a component')
  .argument('<componentPath>', 'Path to the component file')
  .option('-u, --utils <paths...>', 'Paths to test utility files')
  .option('-t, --tests <paths...>', 'Paths to existing test files for reference')
  .option('-i, --interactive', 'Enable interactive mode for test improvements')
  .option('-o, --output <path>', 'Path where to save the test file (default: __tests__/ComponentName.test.tsx)')
  .action(async (componentPath: string, options: { 
    example?: string, 
    utils?: string[], 
    tests?: string[],
    interactive?: boolean,
    output?: string
  }) => {
    try {
      const generator = new AstTestGenerator();
      const result = await generator.generateTests(
        path.resolve(componentPath),
        {
          testUtilsPaths: options.utils?.map(p => path.resolve(p)),
          referenceTestsPaths: options.tests?.map(p => path.resolve(p)),
          outputPath: options.output ? path.resolve(options.output) : undefined
        }
      );
      console.log(`‚úÖ Tests generated and saved to: ${result}`);

      if (options.interactive) {
        await startInteractiveMode(generator, result);
      }
    } catch (error) {
      console.error('‚ùå Error:', error instanceof Error ? error.message : 'Unknown error');
      process.exit(1);
    }
  });

async function startInteractiveMode(generator: AstTestGenerator, testFilePath: string) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  console.log('\nüîÑ Interactive mode started');
  console.log('Type your feedback to improve the test (or "exit" to quit)');
  console.log('Example feedback: "Add tests for error handling" or "Add more test cases for form validation"');

  const askForFeedback = () => {
    rl.question('\nüìù Your feedback: ', async (feedback) => {
      if (feedback.toLowerCase() === 'exit') {
        console.log('üëã Goodbye!');
        rl.close();
        return;
      }

      try {
        const result = await generator.improveTest(testFilePath, feedback);
        console.log(`‚úÖ Test improved and saved to: ${result}`);
        askForFeedback();
      } catch (error) {
        console.error('‚ùå Error:', error instanceof Error ? error.message : 'Unknown error');
        askForFeedback();
      }
    });
  };

  askForFeedback();
}

program.parse();