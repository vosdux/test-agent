import fs from "fs";
import path from "path";
import { parse } from "@babel/parser";
import traverse from "@babel/traverse";
import { GigaChat } from "langchain-gigachat";
import { Agent } from "https";
import dotenv from "dotenv";

dotenv.config();

type DependencyGraph = Record<
  string,
  {
    code: string;
    dependencies: string[];
  }
>;

type TestGenerationOptions = {
  exampleTestPath?: string;
  testUtilsPaths?: string[];
  referenceTestsPaths?: string[];
  outputPath?: string;
};

type TestGenerationContext = {
  entryCode: string;
  dependenciesCode: string[];
  testFramework: string;
  entryPath: string;
  testUtils?: string[];
  referenceTests?: string[];
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –ø—É—Ç–µ–º –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ–¥–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GigaChat –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏.
 */
export class AstTestGenerator {
  private llm: GigaChat;
  private readonly MAX_DEPTH = 5;
  private readonly MAX_CONTEXT_LENGTH = 15000;

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AstTestGenerator.
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç GigaChat —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
   * @throws {Error} –ï—Å–ª–∏ GIGA_API_KEY –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  constructor() {
    if (!process.env.GIGA_API_KEY) {
      throw new Error("GIGA_API_KEY is not defined in .env");
    }

    this.llm = new GigaChat({
      credentials: process.env.GIGA_API_KEY,
      model: "GigaChat-2",
      temperature: 0.2,
      topP: 0.8,
      httpsAgent: new Agent({ rejectUnauthorized: false }),
      timeout: 300000,
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
   * @param entryPath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã
   * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
   * @returns Promise<string> - –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
   */
  public async generateTests(
    entryPath: string,
    options: TestGenerationOptions = {}
  ): Promise<string> {
    const absolutePath = path.resolve(entryPath);
    const context = await this.buildTestContext(absolutePath, options);
    const testCode = await this.generateTestCode(context);
    const testFilePath = this.getTestFilePath(absolutePath, options);
    this.ensureDirectoryExists(testFilePath);
    fs.writeFileSync(testFilePath, testCode);

    return testFilePath;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –ø—É—Ç–µ–º –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç.
   * @param entryPath - –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è
   * @param options - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
   * @returns Promise<TestGenerationContext> - –ö–æ–Ω—Ç–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
   */
  private async buildTestContext(
    entryPath: string,
    options: TestGenerationOptions
  ): Promise<TestGenerationContext> {
    const graph = this.buildDependencyGraph(entryPath);
    const entryCode = graph[entryPath]?.code || "";

    const testUtils = options.testUtilsPaths
      ? await this.loadTestFiles(options.testUtilsPaths)
      : undefined;

    const referenceTests = options.referenceTestsPaths
      ? await this.loadTestFiles(options.referenceTestsPaths)
      : undefined;

    console.log("\nüìã Test context:");
    console.log("------------------------");
    if (testUtils) {
      console.log("\nüîß Test utilities:");
      testUtils.forEach((code, index) => {
        const fileName = code.split("\n")[0].replace("// ", "");
        console.log(`${index + 1}. ${fileName}`);
      });
    }

    if (referenceTests) {
      console.log("\nüìö Reference tests:");
      referenceTests.forEach((code, index) => {
        const fileName = code.split("\n")[0].replace("// ", "");
        console.log(`${index + 1}. ${fileName}`);
      });
    }
    console.log("------------------------\n");

    return {
      entryCode,
      dependenciesCode: this.getDependenciesCode(graph, entryPath),
      testFramework: this.detectTestFramework(entryPath),
      entryPath,
      testUtils,
      referenceTests,
    };
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç –∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ–π.
   * @param filePaths - –ú–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç
   * @returns Promise<string[]> - –ú–∞—Å—Å–∏–≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤ —Å –∏—Ö –ø—É—Ç—è–º–∏ –≤ –≤–∏–¥–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   */
  private async loadTestFiles(filePaths: string[]): Promise<string[]> {
    return Promise.all(
      filePaths.map(async (filePath) => {
        try {
          const content = await fs.promises.readFile(filePath, "utf-8");
          return `// ${filePath}\n${content}`;
        } catch (error) {
          console.warn(`‚ö†Ô∏è Could not read test file: ${filePath}`);
          return "";
        }
      })
    ).then((files) => files.filter((content) => content.length > 0));
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
   * @param entryPath - –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
   * @param depth - –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0)
   * @param graph - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {})
   * @returns DependencyGraph - –ö–∞—Ä—Ç–∞ –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤ –∫ –∏—Ö –∫–æ–¥—É –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
   */
  private buildDependencyGraph(
    entryPath: string,
    depth = 0,
    graph: DependencyGraph = {}
  ): DependencyGraph {
    if (depth > this.MAX_DEPTH) {
      console.log(`‚ö†Ô∏è Max depth (${this.MAX_DEPTH}) reached for: ${entryPath}`);
      return graph;
    }

    const absolutePath = path.resolve(entryPath);
    if (graph[absolutePath]) {
      console.log(`‚è≠Ô∏è Already processed: ${absolutePath}`);
      return graph;
    }

    try {
      console.log(`\nüîç Processing file (depth ${depth}): ${absolutePath}`);
      const code = fs.readFileSync(absolutePath, "utf-8");
      const dependencies = this.analyzeDependencies(code);

      graph[absolutePath] = { code, dependencies: [] };

      console.log(`üì¶ Found ${dependencies.length} dependencies:`);
      dependencies.forEach((dep) => {
        const depPath = this.resolveDependency(dep, absolutePath);
        if (depPath) {
          console.log(`  ‚úÖ Resolved: ${dep} -> ${depPath}`);
          graph[absolutePath].dependencies.push(depPath);
          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
          this.buildDependencyGraph(depPath, depth + 1, graph);
        } else {
          console.log(`  ‚ùå Could not resolve: ${dep}`);
        }
      });

      return graph;
    } catch (error) {
      console.warn(`‚ö†Ô∏è Could not analyze: ${absolutePath}`);
      console.warn(
        `   Error: ${error instanceof Error ? error.message : "Unknown error"}`
      );
      return graph;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ require-–≤—ã—Ä–∞–∂–µ–Ω–∏–π.
   * @param code - –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @returns string[] - –ú–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   */
  private analyzeDependencies(code: string): string[] {
    const ast = parse(code, {
      sourceType: "module",
      plugins: ["jsx", "typescript", "decorators-legacy"],
    });

    const dependencies = new Set<string>();

    traverse(ast, {
      ImportDeclaration({ node }) {
        if (node.source.value) {
          console.log(`üì¶ Found import: ${node.source.value}`);
          dependencies.add(node.source.value);
        }
      },
      ExportNamedDeclaration({ node }) {
        if (node.source?.value) {
          console.log(`üì¶ Found export: ${node.source.value}`);
          dependencies.add(node.source.value);
        }
      },
      CallExpression({ node }) {
        if (
          node.callee.type === "Identifier" &&
          node.callee.name === "require" &&
          node.arguments[0]?.type === "StringLiteral"
        ) {
          console.log(`üì¶ Found require: ${node.arguments[0].value}`);
          dependencies.add(node.arguments[0].value);
        }
      },
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ npm-–ø–∞–∫–µ—Ç—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å @
    // const npmDependencies = Array.from(dependencies).filter(dep => !dep.startsWith('@'));
    // –û—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    const relativeDependencies = Array.from(dependencies).filter((dep) =>
      dep.startsWith(".")
    );

    console.log("\nüîç Dependencies analysis:");
    console.log("------------------------");
    // console.log('üì¶ NPM packages:', npmDependencies);
    console.log("üì¶ Relative imports:", relativeDependencies);
    console.log("------------------------\n");

    return relativeDependencies;
  }

  /**
   * –†–∞–∑—Ä–µ—à–∞–µ—Ç –ø—É—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.
   * @param dependency - –ü—É—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
   * @param basePath - –ü—É—Ç—å –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
   * @returns string | null - –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  private resolveDependency(
    dependency: string,
    basePath: string
  ): string | null {
    const baseDir = path.dirname(basePath);
    const extensions = [".js", ".jsx", ".ts", ".tsx", ".vue", ""];

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º npm-–ø–∞–∫–µ—Ç—ã
    if (!dependency.startsWith(".")) {
      console.log(`‚è≠Ô∏è Skipping npm package: ${dependency}`);
      return null;
    }

    console.log(`üîç Resolving dependency: ${dependency}`);
    console.log(`üìÇ Base directory: ${baseDir}`);

    for (const ext of extensions) {
      const fullPath = path.resolve(baseDir, `${dependency}${ext}`);
      if (fs.existsSync(fullPath)) {
        console.log(`‚úÖ Found file: ${fullPath}`);
        return fullPath;
      }

      const indexPath = path.resolve(baseDir, dependency, `index${ext}`);
      if (fs.existsSync(indexPath)) {
        console.log(`‚úÖ Found index file: ${indexPath}`);
        return indexPath;
      }
    }

    console.log(`‚ùå Could not resolve: ${dependency}`);
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –≥—Ä–∞—Ñ–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
   * @param graph - –ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   * @param entryPath - –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
   * @returns string[] - –ú–∞—Å—Å–∏–≤ –∫–æ–¥–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –∏—Ö –ø—É—Ç—è–º–∏ –≤ –≤–∏–¥–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   */
  private getDependenciesCode(
    graph: DependencyGraph,
    entryPath: string
  ): string[] {
    const processed = new Set<string>();

    const collectDependencies = (currentPath: string): string[] => {
      if (processed.has(currentPath)) {
        return [];
      }

      processed.add(currentPath);
      const dependencies = graph[currentPath]?.dependencies || [];

      const currentCode = `// ${currentPath}\n${graph[currentPath]?.code || ""
        }`;
      const nestedDependencies = dependencies
        .filter((dep) => dep !== entryPath)
        .flatMap((dep) => collectDependencies(dep));

      return [currentCode, ...nestedDependencies];
    };

    const absolutePath = path.resolve(entryPath);
    const allDependencies = collectDependencies(absolutePath);

    return allDependencies.filter((code) => code.length > 0);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ GigaChat.
   * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
   * @returns Promise<string> - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
   */
  private async generateTestCode(
    context: TestGenerationContext
  ): Promise<string> {
    const {
      entryCode,
      dependenciesCode,
      testFramework,
      entryPath,
      testUtils,
      referenceTests,
    } = context;
    const fileName = path.basename(entryPath);

    console.log("\nüìã Files included in prompt:");
    console.log("------------------------");
    console.log(`üìÑ Main component: ${fileName}`);
    console.log(`üìù Code length: ${entryCode.length} characters`);

    if (dependenciesCode.length > 0) {
      console.log("\nüì¶ Dependencies:");
      dependenciesCode.forEach((code, index) => {
        const depName = code.split("\n")[0].replace("// ", "");
        console.log(`${index + 1}. ${depName}`);
        console.log(`   üìù Code length: ${code.length} characters`);
      });
    } else {
      console.log("\n‚ÑπÔ∏è No dependencies found");
    }

    console.log(
      "\nüîç Total context size:",
      entryCode.length +
      dependenciesCode.reduce((sum, code) => sum + code.length, 0),
      "characters"
    );
    console.log("------------------------\n");

    const prompt = `
You are a senior QA engineer. Generate comprehensive integration tests for the ${testFramework} component.

File: ${fileName}
Test framework: Vitest + React Testing Library + MSW

Main component code:
\`\`\`typescript
${entryCode}
\`\`\`

Dependencies:
\`\`\`typescript
${dependenciesCode.join("\n\n")}
\`\`\`

${testUtils
        ? `Test utilities:
\`\`\`typescript
${testUtils.join("\n\n")}
\`\`\`
`
        : ""
      }

${referenceTests
        ? `Reference tests:
\`\`\`typescript
${referenceTests.join("\n\n")}
\`\`\`
`
        : ""
      }

Requirements:
1. User Scenarios Coverage:
   - CRUD operations (Create, Read, Update, Delete)
   - Form submissions and validations
   - Data filtering and sorting
   - Pagination and infinite scroll
   - Search functionality
   - File uploads/downloads if present

2. UI Interactions:
   - All clickable elements (buttons, links, checkboxes)
   - Form inputs (text fields, selects, radio buttons)
   - Modal dialogs and popups
   - Dropdown menus and tooltips
   - Drag and drop if applicable
   - Keyboard navigation

3. Data Flow:
   - API calls and responses
   - Loading states
   - Error handling
   - Success messages
   - Data persistence
   - Cache management

4. Edge Cases:
   - Empty states
   - Error states
   - Network failures
   - Invalid inputs
   - Concurrent operations
   - Session timeouts

5. Testing Best Practices:
   - Use MSW version 2 for API mocking
   - Follow the same style as example test
   - Use data-testid attributes
   - Test accessibility
   - Verify component state changes
   - Check side effects

6. dont test aria-attributes


Generate a complete test file that covers all these aspects. Focus on real user interactions and business logic.
Output ONLY the test code without explanations.
`;

    console.log("ü§ñ Sending prompt to GigaChat...");
    const response = await this.llm.invoke(prompt);

    const improvePrompt = `
      You are a senior QA engineer. Improve the existing test.

      Current test:
      \`\`\`typescript
      ${response.content}
      \`\`\`

      Requirements:
      Check server mock with msw. dont user rest and ctx function.
      It is old version of msw. Use http and HttpResponse from msw.

      Bad mocking example:
      \`\`\`typescript
      const server = setupServer(
        rest.get('https://jsonplaceholder.typicode.com/todos?_limit=10', (req, res, ctx) => {
          return res(ctx.json([{ id: 1, title: 'Task 1', completed: false }, { id: 2, title: 'Task 2', completed: true }, { id: 3, title: 'Task 3', completed: false }]))
        }),
      )

      // bad use request to get data example
      http.post('https://jsonplaceholder.typicode.com/todos', (request) => {
        const body = JSON.parse(request.body);
        return HttpResponse.json({ id: 4, text: body.title, completed: false });
      }),

      // bad get params example
      http.put('https://jsonplaceholder.typicode.com/todos/:id', (request) => {
        const params = request.params;
        const body = JSON.parse(request.body);
        return HttpResponse.json({
          id: parseInt(params.id),
          text: body.title,
          completed: body.completed,
        });
      }),

      // bad get empty data example
      http.delete('https://jsonplaceholder.typicode.com/todos/:id', () => {
        return HttpResponse.empty();
      }),
      \`\`\`

      Good mocking example:
      \`\`\`typescript
        import { http, HttpResponse } from 'msw'
        import { setupServer } from 'msw/node'

        const handlers = [
          // success response
          http.get('https://jsonplaceholder.typicode.com/todos?_limit=10', () =>
            HttpResponse.json([
              { id: 1, title: 'Task 1', completed: false },
              { id: 2, title: 'Task 2', completed: true },
              { id: 3, title: 'Task 3', completed: false },
            ]),
          ),

          // error response with status 401
          http.get('https://jsonplaceholder.typicode.com/todos?_limit=10', () =>
            HttpResponse.json(
              { error: 'Unauthorized' },
              { status: 401 },
            ),
          ),

          // network error
          http.get('https://jsonplaceholder.typicode.com/todos?_limit=10', () =>
            HttpResponse.error(),
          ),

          // use request to get data
          http.get('https://jsonplaceholder.typicode.com/todos?_limit=10', async ({ request }) => {
            const data = await request.clone().json();

            if (data?.id === 'abc-123') {
              return HttpResponse.json({ id: 'abc-123' })
            }

            return HttpResponse.json({ id: 'not-found' })
            }
          ),

          // good get params example
          http.put('https://jsonplaceholder.typicode.com/todos/:id', async ({ request, params }) => {
            const { id } = params;
            const body = await request.clone().json();
            return HttpResponse.json({
              id,
              text: body.title,
              completed: body.completed,
            });
          }),

          // good get empty data example
          http.delete('https://jsonplaceholder.typicode.com/todos/:id', () => {
            return HttpResponse.json();
          }),
        ]

        setupServer(...handlers)
      \`\`\`

      Improve the test by using good mocking example.
      
      Output ONLY the improved test code without explanations.
    `;

    console.log("ü§ñ Sending improve prompt to GigaChat...");
    const improveResponse = await this.llm.invoke(improvePrompt);

    if (typeof improveResponse.content === "string") {
      const cleanedCode = this.cleanGeneratedCode(
        improveResponse.content || "error"
      );
      console.log("‚úÖ Test code generated successfully");
      return cleanedCode;
    }

    console.error("‚ùå Failed to generate test code");
    return "error";
  }

  /**
   * –û–±—Ä–µ–∑–∞–µ—Ç –∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
   * @param code - –ö–æ–¥ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
   * @returns string - –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π –∫–æ–¥ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  private truncateCode(code: string): string {
    return code.length > this.MAX_CONTEXT_LENGTH
      ? code.substring(0, this.MAX_CONTEXT_LENGTH) + "\n// ... (truncated)"
      : code;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥, —É–¥–∞–ª—è—è –º–∞—Ä–∫–µ—Ä—ã –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ markdown.
   * @param code - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
   * @returns string - –û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–¥
   */
  private cleanGeneratedCode(code: string): string {
    return code.replace(/```[^\n]*/g, "").trim();
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
   * @param filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @returns string - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ ('Vue', 'Svelte' –∏–ª–∏ 'React')
   */
  private detectTestFramework(filePath: string): string {
    const ext = path.extname(filePath).toLowerCase();
    return ext === ".vue" ? "Vue" : ext === ".svelte" ? "Svelte" : "React";
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.
   * @param originalPath - –ü—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
   * @param options - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
   * @returns string - –ü—É—Ç—å, –∫—É–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
   */
  private getTestFilePath(
    originalPath: string,
    options: TestGenerationOptions = {}
  ): string {
    if (options.outputPath) {
      return options.outputPath;
    }

    const parsed = path.parse(originalPath);
    return path.join(
      parsed.dir,
      "__tests__",
      `${parsed.name}.test${parsed.ext}`
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–∞, —Å–æ–∑–¥–∞–≤–∞—è –µ—ë –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
   * @param filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
   */
  private ensureDirectoryExists(filePath: string): void {
    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  }

  /**
   * –£–ª—É—á—à–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * @param testPath - –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
   * @param feedback - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
   * @returns Promise<string> - –ü—É—Ç—å –∫ —É–ª—É—á—à–µ–Ω–Ω–æ–º—É —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
   * @throws {Error} –ï—Å–ª–∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—É—Å—Ç–∞ –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å
   */
  public async improveTest(
    testPath: string,
    feedback: string
  ): Promise<string> {
    if (!feedback) {
      throw new Error("Feedback is required for test improvement");
    }

    console.log(`üîç Improving test: ${path.basename(testPath)}...`);

    try {
      const currentTest = await fs.promises.readFile(testPath, "utf-8");
      console.log(currentTest, 'currentTest')
      const prompt = `
You are a senior QA engineer. Improve the existing test based on the user feedback.

Current test:
\`\`\`typescript
${currentTest}
\`\`\`

User feedback:
${feedback}

Requirements:
1. Keep the existing test structure and style
2. Address all points from user feedback
3. Maintain existing test coverage
4. Add new test cases if needed
5. Fix any issues mentioned in feedback
6. Keep the code clean and well-organized

Output ONLY the improved test code without explanations.
`;

      console.log("ü§ñ Sending prompt to GigaChat...");
      const response = await this.llm.invoke(prompt);

      if (typeof response.content === "string") {
        const cleanedCode = this.cleanGeneratedCode(
          response.content || "error"
        );
        await fs.promises.writeFile(testPath, cleanedCode);
        console.log("‚úÖ Test improved successfully");
        return testPath;
      }

      throw new Error("Failed to generate improved test");
    } catch (error) {
      console.error("Error improving test:", error);
      throw error;
    }
  }
}
